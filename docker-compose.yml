version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_app
    restart: unless-stopped
    networks:
      - app-network
    # 포트는 Nginx를 통해 접근하므로 외부 노출 필요 없음
    # ports:
    #   - "3000:3000" # 디버깅 시 필요하면 주석 해제

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_api
    restart: unless-stopped
    volumes:
      # backend/waitlist.db 파일을 컨테이너 내부 /app/waitlist.db 로 마운트
      # backend/db.ts 가 /app 경로에서 waitlist.db를 찾도록 수정 필요할 수 있음
      - ./backend/waitlist.db:/app/waitlist.db
    environment:
      # 필요한 환경 변수 추가 (예: DB 경로, API 키 등)
      # NODE_ENV: production
      PORT: 8000 # Dockerfile에서 사용된 포트와 일치
    networks:
      - app-network
    # 포트는 Nginx를 통해 접근하므로 외부 노출 필요 없음
    # ports:
    #   - "8000:8000" # 디버깅 시 필요하면 주석 해제

  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80" # 호스트의 80 포트를 컨테이너의 80 포트로 매핑
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf # Nginx 설정 파일 마운트
      - nginx_logs:/var/log/nginx # 로그 볼륨 (선택 사항)
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  nginx_logs: # 로그 저장을 위한 명명된 볼륨 (선택 사항) 